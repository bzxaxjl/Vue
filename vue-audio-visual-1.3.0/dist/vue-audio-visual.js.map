{"version":3,"sources":["webpack:///webpack/bootstrap e85ef5348c18f56349cf","webpack:///./src/components/AvBase.js","webpack:///./src/components/AvBars.js","webpack:///./src/components/AvLine.js","webpack:///./src/components/AvCircle.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","AvBase","props","audioSrc","type","String","default","audioControls","Boolean","audioClass","canvWidth","Number","canvHeight","canvClass","canvTop","canvFillColor","Array","methods","createHTMLElements","audio","document","createElement","audioDiv","canv","canvDiv","setAttribute","this","appendChild","$el","insertBefore","ctx","getContext","setAnalyser","AudioContext","src","createMediaElementSource","analyser","createAnalyser","connect","fftSize","destination","fillGradient","colorsArray","w","h","gradient","createLinearGradient","offset","forEach","color","addColorStop","length","components_AvBars","mixins","barWidth","barSpace","barColor","capsHeight","capsDropSpeed","capsColor","brickHeight","brickSpace","symmetric","data","caps","render","mounted","_setCapsArray","mainLoop","_this","frqBits","frequencyBinCount","Uint8Array","step","Math","round","barFill","isArray","x","getByteFrequencyData","_fillCanvasBG","_","index","bits","slice","reduce","v","t","barHeight","_drawCap","fillStyle","_drawBar","requestAnimationFrame","clearRect","fillRect","barX","_drawBrickBar","_symAlign","b","barwidth","barY","cap","y","capY","apply","map","components_AvLine","lineWidth","lineColor","_setCanvas","strokeStyle","beginPath","reverse","moveTo","_drawLine","lineTo","stroke","canvColor","components_AvCircle","radius","lineSpace","outlineColor","outlineWidth","barLength","progress","progressWidth","progressColor","progressClockwise","outlineMeterSpace","playtime","playtimeFont","rotateGraph","rotateSpeed","rotate","cx","cy","r","arcStep","ceil","PI","barLen","angle","_rotate","_drawOutline","_drawProgress","_drawPlaytime","_setBarColor","blen","cos","sin","elapsed","currentTime","duration","angleEnd","arc","floor","sec","text","tsizew","measureText","width","font","fillText","parseInt","_this2","createRadialGradient","AVPlugin","install","Vue","window","webkitAudioContext","mozAudioContext","msAudioContext","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","component","__webpack_exports__"],"mappings":"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","file":"vue-audio-visual.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"lVK7\");\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e85ef5348c18f56349cf","/**\n * Mixin component with base and common properties and functions.\n */\n\n/**\n * Base properties common for the audio-visual components\n */\nconst props = {\n  /**\n   * prop: 'audio-src'\n   * Audio element src attribute. When provided creates audio element\n   */\n  audioSrc: {\n    type: String,\n    default: null\n  },\n  /**\n   * prop: 'audio-controls'\n   * Audio element controls attribute. When provided should\n   * display audio element with controls\n   */\n  audioControls: {\n    type: Boolean,\n    default: true\n  },\n  /**\n   * prop: 'audio-class'\n   * Audio element css class name.\n   */\n  audioClass: {\n    type: String,\n    default: null\n  },\n  /**\n   * prop: 'canv-width'\n   * Canvas element width. Default 300\n   */\n  canvWidth: {\n    type: Number,\n    default: 300\n  },\n  /**\n   * prop: 'canv-height'\n   * Canvas element height. Default 80\n   */\n  canvHeight: {\n    type: Number,\n    default: 80\n  },\n  /**\n   * prop: 'canv-class'\n   * Canvas element css class name.\n   */\n  canvClass: {\n    type: String,\n    default: null\n  },\n  /**\n   * prop: 'canv-top'\n   * Canvas element position on top relatively to audio element.\n   * Default: false\n   */\n  canvTop: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'canv-fill-color'\n   * Canvas fill background color. Can be string RGB color or canvas gradients array.\n   * Default is transperent.\n   */\n  canvFillColor: {\n    type: [String, Array],\n    default: null\n  }\n}\n\nconst methods = {\n  /**\n   * Create audio and canvas elements and insert in the HTML template.\n   * Using document.createElement to avoid Vue virtual DOM re-rendering\n   * which and lead to infinit loops.\n   */\n  createHTMLElements: function () {\n    const audio = document.createElement('audio')\n    const audioDiv = document.createElement('div')\n    const canv = document.createElement('canvas')\n    const canvDiv = document.createElement('div')\n\n    audio.setAttribute('src', this.audioSrc)\n    if (this.audioControls) audio.setAttribute('controls', true)\n    if (this.audioClass) audio.setAttribute('class', this.audioClass)\n    audioDiv.appendChild(audio)\n    this.$el.appendChild(audioDiv)\n\n    if (this.canvClass) canv.setAttribute('class', this.canvClass)\n    if (this.canvWidth) canv.setAttribute('width', this.canvWidth)\n    if (this.canvHeight) canv.setAttribute('height', this.canvHeight)\n    canvDiv.appendChild(canv)\n\n    if (this.canvTop) {\n      this.$el.insertBefore(canvDiv, audioDiv)\n    } else {\n      this.$el.appendChild(canvDiv)\n    }\n    this.ctx = canv.getContext('2d')\n    this.audio = audio\n  },\n  /**\n   * Set audio context analyser.\n   */\n  setAnalyser: function () {\n    const ctx = new AudioContext()\n    const src = ctx.createMediaElementSource(this.audio)\n    this.analyser = ctx.createAnalyser()\n\n    src.connect(this.analyser)\n    this.analyser.fftSize = this.fftSize\n    this.analyser.connect(ctx.destination)\n  },\n  /**\n   * Canvas gradient. Vertical, from top down\n   */\n  fillGradient: function (colorsArray) {\n    const w = this.canvWidth\n    const h = this.canvHeight\n    const gradient = this.ctx.createLinearGradient(w / 2, 0, w / 2, h)\n    let offset = 0\n    colorsArray.forEach(color => {\n      gradient.addColorStop(offset, color)\n      offset += (1 / colorsArray.length)\n    })\n    return gradient\n  }\n}\n\nexport default {\n  props,\n  methods\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/AvBase.js","import BaseMixin from './AvBase'\n/**\n * Component props Object\n */\nconst props = {\n  /**\n   * prop: 'bar-width'\n   * Width of the bar in pixels.\n   * Default: 5\n   */\n  barWidth: {\n    type: Number,\n    default: 5\n  },\n  /**\n   * prop: 'bar-space'\n   * Space between bars.\n   * Default: 1\n   */\n  barSpace: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'bar-color'\n   * Bar fill color. Can be string RGB color or canvas gradients array.\n   */\n  barColor: {\n    type: [String, Array],\n    default: '#0A0AFF'\n  },\n  /**\n   * prop: 'caps-height'\n   * Create caps on bars with given height in pixels.\n   * If zero caps then skip creating bars.\n   * Default: 0\n   */\n  capsHeight: {\n    type: Number,\n    default: 0\n  },\n  /**\n   * prop: 'caps-drop-speed'\n   * Caps drop down animation speed.\n   * Default: 0.9\n   */\n  capsDropSpeed: {\n    type: Number,\n    default: 0.9\n  },\n  /**\n   * prop: 'caps-color'\n   * Caps rectangles RGB color.\n   */\n  capsColor: {\n    type: String,\n    default: '#A0A0FF'\n  },\n  /**\n   * prop: 'brick-height'\n   * Draw bar as bricks with set height.\n   */\n  brickHeight: {\n    type: Number,\n    default: 0\n  },\n  /**\n   * prop: 'brick-space'\n   * Space between bricks.\n   */\n  brickSpace: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'symmetric'\n   * Draw bars symmetric to canvas vertical center\n   * Default: false\n   */\n  symmetric: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'fft-size'\n   * Represents the window size in samples that is used when performing\n   * a Fast Fourier Transform (FFT) to get frequency domain data.\n   * Must be power of 2 between 2^5 and 2^15\n   * Default: 1024\n   */\n  fftSize: {\n    type: Number,\n    default: 1024\n  }\n}\n\n/**\n * Component AvBars\n */\nconst AvBars = {\n  name: 'av-bars',\n  mixins: [ BaseMixin ],\n  props,\n  data () {\n    return {\n      audio: null,\n      analyser: null,\n      ctx: null,\n      caps: null\n    }\n  },\n  render: h => h('div'),\n  mounted () {\n    this.createHTMLElements()\n    this.setAnalyser()\n    if (this.capsHeight) {\n      this._setCapsArray()\n    }\n    this.mainLoop()\n  },\n  methods: {\n    /**\n     * Main loop. Draws visualization.\n     */\n    mainLoop: function () {\n      const w = this.canvWidth\n      const h = this.canvHeight\n      const frqBits = this.analyser.frequencyBinCount\n      const data = new Uint8Array(frqBits)\n      const barWidth = this.barWidth >= this.canvWidth ? this.canvWidth : this.barWidth\n      const step = Math.round((barWidth + this.barSpace) / frqBits * w)\n      const barFill = Array.isArray(this.barColor)\n                      ? this.fillGradient(this.barColor)\n                      : this.barColor\n      let x = 0\n\n      this.analyser.getByteFrequencyData(data)\n      this._fillCanvasBG()\n\n      data.forEach((_, index) => {\n        if (index % step) return\n        const bits = Math.round(data.slice(index, index + step)\n                          .reduce((v, t) => t + v, 0) / step)\n        const barHeight = bits / 255 * h\n        if (this.capsHeight) {\n          this._drawCap(index, barWidth, x, bits)\n        }\n        this.ctx.fillStyle = barFill\n        this._drawBar(barWidth, barHeight, x)\n        x += barWidth + this.barSpace\n      })\n      requestAnimationFrame(this.mainLoop)\n    },\n    /**\n     * Canvas background fill\n     * @private\n     */\n    _fillCanvasBG: function () {\n      const w = this.canvWidth\n      const h = this.canvHeight\n      this.ctx.clearRect(0, 0, w, h)\n      if (this.canvFillColor) {\n        this.ctx.fillStyle = Array.isArray(this.canvFillColor)\n                             ? this.fillGradient(this.canvFillColor)\n                             : this.canvFillColor\n        this.ctx.fillRect(0, 0, w, h)\n      }\n    },\n    /**\n     * Draw bar. Solid bar or brick bar.\n     * @private\n     */\n    _drawBar: function (barWidth, barHeight, barX) {\n      if (this.brickHeight) {\n        this._drawBrickBar(barWidth, barHeight, barX)\n      } else {\n        this.ctx.fillRect(\n          barX, this.canvHeight - barHeight - this._symAlign(barHeight),\n          barWidth, barHeight\n        )\n      }\n    },\n    /**\n     * Draw bricks bar.\n     * @private\n     */\n    _drawBrickBar: function (barWidth, barHeight, barX) {\n      for (let b = 0; b < barHeight; b += this.brickHeight + this.brickSpace) {\n        this.ctx.fillRect(\n          barX, this.canvHeight - barHeight + b - this._symAlign(barHeight),\n          barWidth, this.brickHeight\n        )\n      }\n    },\n    /**\n     * Draw cap for each bar and animate caps falling down.\n     * @private\n     */\n    _drawCap: function (index, barwidth, barX, barY) {\n      const cap = this.caps[index] <= barY\n                           ? barY\n                           : this.caps[index] - this.capsDropSpeed\n      const y = (cap / 255.0 * this.canvHeight)\n      const capY = this.canvHeight - y - this.capsHeight - this._symAlign(y)\n      this.ctx.fillStyle = this.capsColor\n      this.ctx.fillRect(\n          barX, capY,\n          barwidth, this.capsHeight)\n      if (this.symmetric) {\n        this.ctx.fillRect(\n          barX, this.canvHeight - capY - this.capsHeight,\n          barwidth, this.capsHeight)\n      }\n      this.caps[index] = cap\n    },\n    /**\n     * Set and init caps array\n     */\n    _setCapsArray: function () {\n      // set caps array and fill with zeros\n      this.caps = Array.apply(null, Array(this.analyser.frequencyBinCount))\n                       .map(() => 0)\n    },\n    /**\n     * Shift for symmetric alignment\n     * @private\n     */\n    _symAlign: function (barHeight) {\n      return this.symmetric ? ((this.canvHeight - barHeight) / 2) : 0\n    }\n  }\n}\n\nexport default AvBars\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/AvBars.js","import BaseMixin from './AvBase'\n\n/**\n * Component props\n */\nconst props = {\n  /**\n   * prop: 'line-width'\n   * Draw line width in px\n   */\n  lineWidth: {\n    type: Number,\n    default: 2\n  },\n  /**\n   * prop: 'line-color'\n   * Draw line color or gradient array\n   */\n  lineColor: {\n    type: [String, Array],\n    default: '#9F9'\n  },\n  /**\n   * prop: 'fft-size'\n   * Represents the window size in samples that is used when performing\n   * a Fast Fourier Transform (FFT) to get frequency domain data.\n   * Must be power of 2 between 2^5 and 2^15\n   * Default: 128\n   */\n  fftSize: {\n    type: Number,\n    default: 128\n  }\n}\n\n/**\n * Component AvLine\n */\nconst AvLine = {\n  name: 'av-line',\n  mixins: [ BaseMixin ],\n  props,\n  data () {\n    return {\n      audio: null,\n      analyser: null,\n      ctx: null\n    }\n  },\n  render: h => h('div'),\n  mounted () {\n    this.createHTMLElements()\n    this.setAnalyser()\n    this.mainLoop()\n  },\n  methods: {\n    /**\n     * Main loop. Draws visualization.\n     */\n    mainLoop: function () {\n      const w = +this.canvWidth\n      const h = +this.canvHeight\n      const frqBits = this.analyser.frequencyBinCount\n      const data = new Uint8Array(frqBits)\n      const step = (w / 2.0) / frqBits\n      let x = 0\n\n      this._setCanvas()\n      this.analyser.getByteFrequencyData(data)\n\n      this.ctx.lineWidth = this.lineWidth\n      this.ctx.strokeStyle = Array.isArray(this.lineColor)\n                             ? this.fillGradient(this.lineColor)\n                             : this.lineColor\n      this.ctx.beginPath()\n\n      data.reverse()\n      this.ctx.moveTo(x, h / 2)\n      x = this._drawLine(data, x, step)\n      data.reverse()\n      x = this._drawLine(data, x, step)\n      this.ctx.lineTo(w, h / 2)\n      this.ctx.stroke()\n\n      requestAnimationFrame(this.mainLoop)\n    },\n    /**\n     * Canvas clear background fill\n     * @private\n     */\n    _setCanvas: function () {\n      const w = this.canvWidth\n      const h = this.canvHeight\n      const canvColor = this.canvFillColor\n      const gradient = this.ctx.createLinearGradient(w / 2, 0, w / 2, h)\n      let offset = 0\n      this.ctx.clearRect(0, 0, w, h)\n\n      if (!canvColor) return\n\n      if (Array.isArray(canvColor)) {\n        canvColor.forEach(color => {\n          gradient.addColorStop(offset, color)\n          offset += (1 / canvColor.length)\n        })\n        this.ctx.fillStyle = gradient\n      } else {\n        this.ctx.fillStyle = canvColor\n      }\n      this.ctx.fillRect(0, 0, w, h)\n    },\n    /**\n     * Draw line and return last X\n     * @private\n     */\n    _drawLine: function (data, x, step) {\n      const h = +this.canvHeight\n      let y = 0\n      data.forEach((v, i) => {\n        // (h / 2) - v / 255 * (h / 2)\n        y = h * (255 - v) / 510\n        if (i % 2) y = h - y\n        this.ctx.lineTo(x, y)\n        x += step\n      })\n      return x\n    }\n  }\n}\n\nexport default AvLine\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/AvLine.js","import BaseMixin from './AvBase'\n\n/**\n * Component props\n */\nconst props = {\n  /**\n   * prop: 'fft-size'\n   * Represents the window size in samples that is used when performing\n   * a Fast Fourier Transform (FFT) to get frequency domain data.\n   * Must be power of 2 between 2^5 and 2^15\n   * Default: 1024\n   */\n  fftSize: {\n    type: Number,\n    default: 1024\n  },\n  /**\n   * prop: 'canv-width'\n   * Canvas element width. Default 100\n   */\n  canvWidth: {\n    type: Number,\n    default: 100\n  },\n  /**\n   * prop: 'canv-height'\n   * Canvas element height. Default 100\n   */\n  canvHeight: {\n    type: Number,\n    default: 100\n  },\n  /**\n   * prop: 'radius'\n   * Set cercle radius. If zero will be calculated from canvas\n   * width: (canv-width / 2) * 0.7\n   * Default: 0\n   */\n  radius: {\n    type: Number,\n    default: 0\n  },\n  /**\n   * prop: 'line-width'\n   * Frequency bit line width to draw.\n   */\n  lineWidth: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'line-space'\n   * Space between lines to draw.\n   */\n  lineSpace: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'outline-color'\n   * Outline (contour) style RGB color.\n   * Default: #00f\n   */\n  outlineColor: {\n    type: String,\n    default: '#0000FF'\n  },\n  /**\n   * prop: 'outline-width'\n   * Outline (contour) line width. Float value.\n   * Default: 0.3\n   */\n  outlineWidth: {\n    type: Number,\n    default: 0.3\n  },\n  /**\n   * prop: 'bar-width'\n   * Frequency graph bar width.\n   */\n  barWidth: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'bar-length'\n   * Frequency graph bar length.\n   * Default is a difference between radius and canvas width.\n   */\n  barLength: {\n    type: Number,\n    default: 0\n  },\n  /**\n   * prop: 'bar-color'\n   * Bar style RGB color or radient gradient when array.\n   * Default: [ #FFFFFF, #0000FF ]\n   */\n  barColor: {\n    type: [String, Array],\n    default: () => [ '#FFFFFF', '#0000FF' ]\n  },\n  /**\n   * prop: 'progress'\n   * Draw play progress meter.\n   * Default: false\n   */\n  progress: {\n    type: Boolean,\n    default: true\n  },\n  /**\n   * prop: 'progress-width'\n   * Progress meter width.\n   * Default: 1\n   */\n  progressWidth: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'progress-color'\n   * Progress meter color.\n   * Default: 1\n   */\n  progressColor: {\n    type: String,\n    default: '#0000FF'\n  },\n  /**\n   * prop: 'progress-clockwise'\n   * Progress meter arc draw direction. Default clockwise\n   * Default: true\n   */\n  progressClockwise: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'outline-meter-space'\n   * Space between outline and progress meter.\n   * Default: 2\n   */\n  outlineMeterSpace: {\n    type: Number,\n    default: 3\n  },\n  /**\n   * prop: 'playtime'\n   * Draw playtime text in the center of the circle.\n   * Default: false\n   */\n  playtime: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'playtime-font'\n   * Played time print font.\n   * Default: '14px Monaco'\n   */\n  playtimeFont: {\n    type: String,\n    default: '14px Monaco'\n  },\n  /**\n   * prop: 'rotate-graph'\n   * Rotate graph clockwise enable.\n   * Default: false\n   */\n  rotateGraph: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'rotate-speed'\n   * Rotate graph speed.\n   * Default: 0.001\n   */\n  rotateSpeed: {\n    type: Number,\n    default: 0.001\n  }\n}\n\n/**\n * Component AvCircle\n */\nconst AvCircle = {\n  name: 'av-circle',\n  mixins: [ BaseMixin ],\n  props,\n  data () {\n    return {\n      rotate: 1.5,\n      audio: null,\n      analyser: null,\n      ctx: null\n    }\n  },\n  render: h => h('div'),\n  mounted () {\n    this.createHTMLElements()\n    this.setAnalyser()\n    this.mainLoop()\n  },\n  methods: {\n    /**\n     * Main loop. Draws visualization.\n     */\n    mainLoop: function () {\n      const w = +this.canvWidth\n      const h = +this.canvHeight\n      const cx = w / 2 // center X\n      const cy = h / 2 // center Y\n      const r = this.radius ? this.radius : Math.round(w / 2 * 0.7)\n      const lineWidth = this.lineWidth\n      const lineSpace = this.lineSpace\n      const arcStep = Math.ceil(lineWidth + lineSpace)\n      const frqBits = this.analyser.frequencyBinCount\n      const data = new Uint8Array(frqBits)\n      const step = ((lineWidth + lineSpace) / data.length) * (2 * Math.PI)\n      const barLen = this.barLength > 0\n                     ? this.barLength\n                     : (w / 2) - r\n      let angle = Math.PI * this._rotate() // start from top\n\n      this._setCanvas()\n      this.analyser.getByteFrequencyData(data)\n\n      // contour outline\n      if (this.outlineWidth > 0) {\n        this._drawOutline(r, cx, cy)\n      }\n\n      // draw play progress meter\n      if (this.progress) {\n        this._drawProgress(r, cx, cy)\n      }\n\n      // draw played time\n      if (this.playtime) {\n        this._drawPlaytime(cx, cy)\n      }\n\n      // circle bar lines\n      this.ctx.lineWidth = this.barWidth\n      this.ctx.strokeStyle = this._setBarColor(cx, cy)\n\n      data.forEach((_, index) => {\n        angle += step\n        if (index % arcStep) {\n          return\n        }\n        const bits = Math.round(data.slice(index, index + arcStep)\n                          .reduce((v, t) => t + v, 0) / arcStep)\n\n        const blen = r + (bits / 255.0 * barLen)\n        this.ctx.beginPath()\n        this.ctx.moveTo(r * Math.cos(angle) + cx, r * Math.sin(angle) + cy)\n        this.ctx.lineTo(blen * Math.cos(angle) + cx, blen * Math.sin(angle) + cy)\n        this.ctx.stroke()\n      })\n\n      requestAnimationFrame(this.mainLoop)\n    },\n    /**\n     * Canvas clear background fill\n     * @private\n     */\n    _setCanvas: function () {\n      this.ctx.clearRect(0, 0, this.canvWidth, this.canvHeight)\n\n      if (!this.canvFillColor) return\n\n      this.ctx.fillStyle = Array.isArray(this.canvFillColor)\n                           ? this.fillGradient(this.canvFillColor)\n                           : this.canvFillColor\n      this.ctx.fillRect(0, 0, this.canvWidth, this.canvHeight)\n    },\n    /**\n     * Draw play progress meter\n     */\n    _drawProgress: function (r, cx, cy) {\n      const elapsed = this.audio.currentTime / this.audio.duration * 2 * Math.PI\n      const angleEnd = Math.PI * 1.5 + elapsed\n\n      if (!elapsed) return\n\n      this.ctx.lineWidth = this.progressWidth\n      this.ctx.strokeStyle = this.progressColor\n\n      this.ctx.beginPath()\n      this.ctx.arc(cx, cy, r - this.outlineWidth - this.outlineMeterSpace,\n                  1.5 * Math.PI, angleEnd, this.progressClockwise)\n      this.ctx.stroke()\n    },\n    /**\n     * Draw outline circle\n     */\n    _drawOutline: function (r, cx, cy) {\n      this.ctx.beginPath()\n      this.ctx.strokeStyle = this.outlineColor\n      this.ctx.lineWidth = this.outlineWidth\n      this.ctx.arc(cx, cy, r, 0, 2 * Math.PI)\n      this.ctx.stroke()\n    },\n    /**\n     * Draw played time\n     */\n    _drawPlaytime: function (cx, cy) {\n      const m = Math.floor(this.audio.currentTime / 60)\n      const sec = Math.round(this.audio.currentTime) % 60\n      const s = sec < 10 ? `0${sec}` : `${sec}`\n      const text = `${m}:${s}`\n      const tsizew = Math.ceil(this.ctx.measureText(text).width)\n\n      this.ctx.font = this.playtimeFont\n      this.ctx.fillStyle = '#00f'\n      this.ctx.fillText(text, cx - Math.round(tsizew / 2), cy + 0.25 * parseInt(this.playtimeFont))\n    },\n    /**\n     * If rotate is enabled will return rotated angle\n     */\n    _rotate: function () {\n      if (this.rotateGraph) {\n        this.rotate = this.rotate === 3.5 ? 1.5 : this.rotate + this.rotateSpeed\n      } else {\n        this.rotate = 1.5\n      }\n      return this.rotate\n    },\n    /**\n     * Set bars color.\n     */\n    _setBarColor: function (cx, cy) {\n      if (!Array.isArray(this.barColor)) {\n        return this.barColor\n      }\n      const gradient = this.ctx.createRadialGradient(cx, cy, this.canvWidth / 2, cx, cy, 0)\n      let offset = 0\n\n      this.barColor.forEach(color => {\n        gradient.addColorStop(offset, color)\n        offset += (1 / this.barColor.length)\n      })\n      return gradient\n    }\n  }\n}\n\nexport default AvCircle\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/AvCircle.js","import AvBars from './components/AvBars'\nimport AvLine from './components/AvLine'\nimport AvCircle from './components/AvCircle'\n\nconst AVPlugin = {}\n\nAVPlugin.install = function (Vue) {\n  // browsers compatibility\n  window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext\n  window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n  // Components\n  Vue.component(AvBars.name, AvBars)\n  Vue.component(AvLine.name, AvLine)\n  Vue.component(AvCircle.name, AvCircle)\n}\n\nexport default AVPlugin\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}